input {
    udp {
        port => $INPUT_PORT
        codec => json
    }
}

filter {
    metricize {
        # split event into domain and host event
       metrics => [ "domains", "host", "profile" ]
       value_field_name => "rawin"
    }

    if [metric] == "domains" {
        # produce one event for each domain
        split {
            field => "rawin"
        }
    }

    if [metric] == "domains" or [metric] == "host" {
        # move fields form 'rawin' object to root
        ruby {
            code => "
                if event.get('rawin').respond_to?('each')
                    event.get('rawin').each {|k, v|
                        event.set(k, v)
                    }
                end
                event.remove('rawin')
            "
        }
    }

    if [metric] == "profile" {
        # receiving this:
        #
        # {
        #     "profile": {
        #        "name": "vm uuid",
        #        "periodTree": {
        #            "root": {
        #                   "maxChilds": 1,
        #                   "children": [ ... other nodes like root node ... ]
        #                   "txmatrix": [{
        #                       "metric": "cpu",
        #                       "transitions": ...,
        #                       "stats": ...
        #                   }, ... , {
        #                       "metric": "net",
        #                       "transitions": ...,
        #                       "stats": ...
        #                   }]
        #            }
        #        }
        #        "settings": ...
        #     }
        # }
        #

        ruby {
            code => "
                if event.get('rawin').respond_to?('each')
                    profile = {}
                    event.get('rawin').each {|k, v|
                        if k == 'name'
                            event.set('name', v)
                        elsif k == 'periodTree'
                            profile['periodTree'] = v
                        elsif k == 'settings'
                            profile['settings'] = v
                        end
                    }
                    event.set('profile', profile.to_json)
                end
                event.remove('rawin')
            "
        }
    }

}


output {
    if [metric] == "domains" {
        # stdout {}
        influxdb {
            host => "$OUTPUT_HOST"
            port => $OUTPUT_PORT
            user => "$OUTPUT_USER"
            password => "$OUTPUT_PASS"
            db => "kvmtop"
            time_precision => "ms"
            measurement => "kvmtop.domains"
            send_as_tags => ["UUID", "name", "host_name"]
            use_event_fields_for_data_points => true
        }
    }

    if [metric] == "host" {
        # stdout {}
        influxdb {
            host => "$OUTPUT_HOST"
            port => $OUTPUT_PORT
            user => "$OUTPUT_USER"
            password => "$OUTPUT_PASS"
            db => "kvmtop"
            time_precision => "ms"
            measurement => "kvmtop.hosts"
            send_as_tags => ["host_name"]
            use_event_fields_for_data_points => true
        }    
    }

    if [metric] == "profile" {
        #stdout {}
        influxdb {
            host => "$OUTPUT_HOST"
            port => $OUTPUT_PORT
            user => "$OUTPUT_USER"
            password => "$OUTPUT_PASS"
            db => "kvmtop"
            time_precision => "ms"
            measurement => "kvmtop.profile"
            send_as_tags => ["name"]
            use_event_fields_for_data_points => true
        }    
    }    
  
}
